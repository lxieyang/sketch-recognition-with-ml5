{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import p5 from 'p5';\n  import JSZip from 'jszip/dist/jszip.min';\n  import FileSaver from 'file-saver';\n\n  let myp5;\n  let canvasWidth = 200;\n  let canvasHeight = 150;\n  let featureExtractor;\n  let classifier;\n  let modelStatus = '';\n\n  let labels = new Map();\n  labels.set('Rectangle', []);\n  labels.set('Circle', []);\n  labels.set('Line', []);\n  $: canTrain = checkCanTrain(labels);\n  let modelCanBeSaved = false;\n  let newLabel = '';\n  $: toAdd = newLabel.trim().toLowerCase();\n\n  let activeLabelButton = '';\n\n  let modalOpen = false;\n  let modalLabel = '';\n\n  let mode = 'train'; // 'train' or 'test'\n  let classificationResults = [\n    // { label: 'rect', confidence: 0.7213 },\n    // { label: 'line', confidence: 0.05 },\n    // { label: 'circle', confidence: 0.23 },\n  ];\n\n  function checkCanTrain(lbs = new Map()) {\n    let cantrain = true;\n    if (lbs.size === 0) {\n      cantrain = false;\n    }\n    Array.from(lbs.keys()).forEach(lb => {\n      if (lbs.get(lb) && lbs.get(lb).length === 0) {\n        cantrain = false;\n      }\n    });\n    return cantrain;\n  }\n\n  let sketch = function(p5) {\n    let canvas;\n    // let canvasWidth = 200;\n    // let canvasHeight = 150;\n\n    p5.setup = () => {\n      canvas = p5.createCanvas(canvasWidth, canvasHeight);\n      canvas.parent('canvas-holder');\n      p5.background('white');\n      p5.strokeWeight(6);\n      p5.stroke(0);\n    };\n\n    p5.touchMoved = () => {\n      p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\n      return false;\n    };\n\n    p5.touchEnded = () => {\n      if (p5.mouseX >= 0 && p5.mouseY >= 0 && p5.mouseX <= canvasWidth && p5.mouseY <= canvasHeight) {\n        if (mode === 'test' && classifier && classify) {\n          classify();\n        }\n      }\n    };\n\n    p5.clearCanvas = () => {\n      p5.clear();\n      p5.background('white');\n    };\n  };\n\n  onMount(_ => {\n    const canvasHolderDiv = document.querySelector('#canvas-holder');\n    canvasWidth = canvasHolderDiv.clientWidth;\n    canvasHeight = canvasHolderDiv.clientHeight;\n\n    myp5 = new p5(sketch);\n\n    window.addEventListener('beforeunload', event => {\n      let msg = 'Are you sure you want to leave?';\n      // Chrome requires returnValue to be set.\n      event.returnValue = msg;\n      return msg;\n    });\n  });\n\n  function addNewLabel() {\n    if (toAdd) {\n      labels.set(toAdd, []);\n      labels = labels;\n      newLabel = '';\n    }\n  }\n\n  function removeLabel(target) {\n    labels.delete(target);\n    labels = labels;\n  }\n\n  function addTrainingExampleFor(target) {\n    activeLabelButton = target;\n    const dataURL = document.querySelector('#canvas-holder canvas').toDataURL();\n    labels.get(target).push(dataURL);\n    labels = labels;\n    myp5.clearCanvas();\n  }\n\n  function trainModel() {\n    modelStatus = 'loading model...';\n    featureExtractor = ml5.featureExtractor('MobileNet', { numLabels: Array.from(labels.keys()).length }, () => {\n      modelStatus = 'adding training examples...';\n      let promises = [];\n      Array.from(labels.keys()).forEach(lb => {\n        const examples = labels.get(lb);\n        examples.forEach(dataURL => {\n          let img = document.createElement('img');\n          img.src = dataURL;\n          promises.push(classifier.addImage(img, lb));\n        });\n      });\n      Promise.all(promises).then(() => {\n        console.log('training examples added');\n        classifier.train(function(lossValue) {\n          if (lossValue) {\n            modelStatus = 'training, loss: ' + lossValue;\n          } else {\n            modelStatus = 'done!';\n            modelCanBeSaved = true;\n          }\n        });\n      });\n    });\n\n    classifier = featureExtractor.classification();\n  }\n\n  function classify() {\n    let img = document.createElement('img');\n    img.src = document.querySelector('#canvas-holder canvas').toDataURL();\n    classifier.classify(img, (err, results) => {\n      if (err) {\n        console.log(err);\n      }\n      // console.log(results);\n      if (results && results[0]) {\n        classificationResults = results;\n        // myp5.clearCanvas();\n      }\n    });\n  }\n\n  function saveModel() {\n    classifier.save();\n    let zip = new JSZip();\n    let imgs = zip.folder('training-images');\n    Array.from(labels.keys()).forEach(lb => {\n      let examples = labels.get(lb);\n      examples.forEach((example, idx) => {\n        imgs.file(`${lb}-${idx + 1}.png`, example.split(',')[1], { base64: true });\n      });\n    });\n    zip.generateAsync({ type: 'blob' }).then(function(content) {\n      FileSaver.saveAs(content, 'training-examples.zip');\n    });\n  }\n\n  function loadModel(e) {\n    modelStatus = 'Loading custom models...';\n    featureExtractor = ml5.featureExtractor('MobileNet', { numLabels: Array.from(labels.keys()).length }, () => {\n      modelStatus = 'MobileNet loaded...';\n      classifier.load(e.target.files).then(_ => {\n        modelStatus = 'Custom model ready!';\n      });\n    });\n\n    classifier = featureExtractor.classification();\n  }\n\n  async function loadTrainingImages(e) {\n    const f = e.target.files[0];\n\n    if (f.type !== 'application/zip') {\n      alert('Need a zip file.');\n      return;\n    }\n\n    Object.filter = (obj, predicate) =>\n      Object.keys(obj)\n        .filter(key => predicate(obj[key]))\n        .reduce((res, key) => ((res[key] = obj[key]), res), {});\n\n    let images = Object.filter((await JSZip.loadAsync(f)).files, f => f.dir === false);\n\n    const filenames = Object.keys(images);\n    let newLabels = new Map();\n    const strippedFilenames = new Set(\n      filenames.map(fn => fn.replace('training-images/', '')).map(fn => fn.split('-')[0]),\n    );\n    strippedFilenames.forEach(lb => {\n      newLabels.set(lb, []);\n    });\n\n    for (let i = 0; i < filenames.length; i++) {\n      let content = await images[filenames[i]].async('base64');\n      let label = filenames[i].replace('training-images/', '').split('-')[0];\n\n      newLabels.get(label).push('data:image/png;base64,' + content);\n    }\n\n    labels = newLabels;\n  }\n\n  function closeModal() {\n    modalOpen = false;\n    modalLabel = '';\n  }\n</script>\n\n<style>\n  .labels-container {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n  }\n\n  .labels-container .labels-title {\n    margin-right: 6px;\n  }\n\n  .canvas-container {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    /* height: 190px; */\n  }\n\n  #canvas-holder {\n    width: 200px;\n    height: 160px;\n    margin-right: 10px;\n  }\n\n  .add-examples-container {\n    flex: 1;\n    flex-basis: 300px;\n    padding: 5px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    overflow: auto;\n  }\n\n  .add-example-group {\n    margin: 5px 0px;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n\n  .add-example-group .buttons {\n    margin-bottom: 0px;\n  }\n\n  .add-example-group .buttons .button {\n    margin-bottom: 0px;\n  }\n\n  .example-images-container {\n    flex: 1;\n    height: 40px;\n    display: flex;\n    align-items: center;\n  }\n\n  .example-images-container img {\n    border: 1px dotted lightgray;\n    margin: 0px 4px;\n    height: 80%;\n  }\n\n  .example-in-modal {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 6px;\n  }\n\n  .example-in-modal img {\n    width: 300px;\n    border: 1px dotted lightgray;\n    margin-right: 10px;\n  }\n\n  .result-item {\n    display: flex;\n    align-items: center;\n    margin: 8px;\n  }\n\n  .result-item .item {\n    display: flex;\n    align-items: center;\n    min-width: 110px;\n    margin-right: 8px;\n  }\n\n  .result-item .item .tag {\n    margin: 0px 4px;\n  }\n\n  .result-item .progress-bar-container {\n    margin: 0px 4px;\n    flex: 1;\n  }\n</style>\n\n<div class=\"container\">\n  <h1 class=\"title is-3\">\n    Simple Sketch Recognition with\n    <a href=\"https://ml5js.org/\" target=\"_blank\">ML5</a>\n  </h1>\n\n  <div class=\"labels-container\">\n    <h1 class=\"labels-title is-capitalized is-size-4 has-text-weight-bold\">Labels:</h1>\n    <div class=\"field is-grouped is-grouped-multiline\">\n      {#each Array.from(labels.keys()) as label}\n        <div class=\"control\">\n          <div class=\"tags has-addons\">\n            <span class=\"tag is-link is-light is-medium\">{label}</span>\n            {#if mode === 'train'}\n              <span class=\"tag is-delete is-medium\" on:click={e => removeLabel(label)} />\n            {/if}\n          </div>\n        </div>\n      {/each}\n    </div>\n  </div>\n\n  {#if Array.from(labels.keys()).length < 2}\n    <em class=\"content has-text-danger is-small\">Please add at least two labels</em>\n  {/if}\n\n  {#if mode === 'train'}\n    <div class=\"field has-addons\" style=\"margin-top: 5px;\">\n      <div class=\"control\">\n        <input class=\"input is-small\" type=\"text\" placeholder=\"Add a label\" bind:value={newLabel} />\n      </div>\n      <div class=\"control\">\n        <button\n          class=\"button is-small is-primary\"\n          disabled={toAdd.length === 0 || labels.has(toAdd)}\n          on:click={addNewLabel}>\n          Add\n        </button>\n        {#if labels.has(toAdd)}\n          <em class=\"content has-text-danger is-small\">exists!</em>\n        {/if}\n      </div>\n    </div>\n  {/if}\n\n  <br />\n  <div class=\"canvas-container\">\n    <div class=\"\">\n      <div id=\"canvas-holder\" />\n      <button\n        class=\"button is-light is-small\"\n        on:click={_ => {\n          myp5.clearCanvas();\n          if (mode === 'test') {\n            classificationResults = [];\n          }\n        }}>\n        Clear\n      </button>\n    </div>\n    {#if mode === 'train'}\n      <div class=\"add-examples-container\">\n        {#each Array.from(labels.keys()) as label}\n          <div class=\"add-example-group\">\n            <div class=\"buttons has-addons\">\n              <button\n                class=\"button is-small {activeLabelButton === label ? 'is-info' : ''}\"\n                on:click={_ => addTrainingExampleFor(label)}>\n                Add as a\n                <span class=\"has-text-weight-bold\" style=\"margin-left: 4px\">{label}</span>\n              </button>\n              <button\n                title=\"Edit examples\"\n                class=\"button is-small\"\n                on:click={_ => {\n                  modalLabel = label;\n                  modalOpen = true;\n                }}>\n                Count: {labels.get(label).length}\n              </button>\n            </div>\n\n            <div class=\"example-images-container\">\n              {#each [...labels.get(label)].reverse().slice(0, 5) as img}\n                <img src={img} alt=\"\" />\n              {/each}\n              {#if labels.get(label).length > 5}...{/if}\n            </div>\n\n          </div>\n        {/each}\n      </div>\n    {/if}\n  </div>\n\n  <div class=\"modal {modalOpen ? 'is-active' : ''}\">\n    <div class=\"modal-background\" />\n    <div class=\"modal-card\">\n      <header class=\"modal-card-head\">\n        <p class=\"modal-card-title\">\n          Training examples for {modalLabel}\n          {#if modalLabel.length > 0}(Total: {labels.get(modalLabel).length}){/if}\n        </p>\n        <button class=\"delete\" aria-label=\"close\" on:click={closeModal} />\n      </header>\n      {#if modalLabel.length > 0}\n        <section class=\"modal-card-body\">\n          {#if labels.get(modalLabel).length === 0}\n            <em class=\"content has-text-danger \">No training examples available. Please add some!</em>\n          {/if}\n          {#each [...labels.get(modalLabel)].reverse() as img}\n            <div class=\"example-in-modal\">\n              <img src={img} alt=\"\" />\n              <button\n                class=\"button is-danger\"\n                on:click={_ => {\n                  let examples = labels.get(modalLabel).filter(item => item !== img);\n                  labels.set(modalLabel, examples);\n                  labels = labels;\n                }}>\n                Delete\n              </button>\n            </div>\n          {/each}\n\n        </section>\n      {/if}\n      <footer class=\"modal-card-foot\">\n        <button class=\"button\" on:click={closeModal}>Close</button>\n      </footer>\n    </div>\n  </div>\n\n  <div class=\"tabs is-medium\">\n    <ul>\n      <li class={mode === 'train' ? 'is-active' : ''}>\n        <a on:click={_ => (mode = 'train')}>Train</a>\n      </li>\n      <li class={mode === 'test' ? 'is-active' : ''}>\n        <a on:click={_ => (mode = 'test')}>Test</a>\n      </li>\n    </ul>\n  </div>\n  {#if mode === 'train'}\n    <div class=\"title is-6\">\n      Status\n      <span class=\"content has-background-warning has-text-dark\">{modelStatus}</span>\n    </div>\n    <div>\n      <button class=\"button is-link\" disabled={!canTrain} on:click={trainModel}>Train</button>\n      <button class=\"button is-success\" disabled={!modelCanBeSaved} on:click={saveModel}>\n        Save Model & Training examples\n      </button>\n      <br />\n      <br />\n      <span class=\"tag is-info\">Load model:</span>\n      <input type=\"file\" name=\"myfile\" multiple on:change={loadModel} />\n      <br />\n      <br />\n      <span class=\"tag is-info\">Load training images:</span>\n      <input type=\"file\" name=\"myfile\" on:change={loadTrainingImages} />\n    </div>\n  {:else if mode === 'test'}\n    {#if classificationResults.length === 0}\n      <div class=\"title is-6\">Start by drawing on the canvas</div>\n    {:else}\n      <div class=\"title is-6\">Classification results:</div>\n    {/if}\n    {#each classificationResults as item, idx}\n      <div class=\"result-item\">\n        <div class=\"item\">\n          Label:\n          <span class=\"tag {idx === 0 ? 'is-success' : ''}\">{item.label}</span>\n        </div>\n        <div class=\"item\">\n          Confidence:\n          <span class=\"tag {idx === 0 ? 'is-success is-light' : ''}\">{item.confidence.toFixed(4)}</span>\n        </div>\n\n        <div class=\"progress-bar-container\">\n          <progress class=\"progress {idx === 0 ? 'is-success' : ''}\" value={item.confidence} max=\"1\">\n            {item.confidence}\n          </progress>\n        </div>\n\n      </div>\n    {/each}\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAmOE,iBAAiB,8BAAC,CAAC,AACjB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,gCAAiB,CAAC,aAAa,eAAC,CAAC,AAC/B,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,iBAAiB,8BAAC,CAAC,AACjB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AAEjB,CAAC,AAED,cAAc,8BAAC,CAAC,AACd,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,uBAAuB,8BAAC,CAAC,AACvB,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,IAAI,AAChB,CAAC,AAED,kBAAkB,8BAAC,CAAC,AAClB,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,iCAAkB,CAAC,QAAQ,eAAC,CAAC,AAC3B,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,iCAAkB,CAAC,QAAQ,CAAC,OAAO,eAAC,CAAC,AACnC,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,yBAAyB,8BAAC,CAAC,AACzB,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,wCAAyB,CAAC,GAAG,eAAC,CAAC,AAC7B,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,MAAM,CAAE,GAAG,AACb,CAAC,AAED,iBAAiB,8BAAC,CAAC,AACjB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,gCAAiB,CAAC,GAAG,eAAC,CAAC,AACrB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,YAAY,8BAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,GAAG,AACb,CAAC,AAED,2BAAY,CAAC,KAAK,eAAC,CAAC,AAClB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,2BAAY,CAAC,KAAK,CAAC,IAAI,eAAC,CAAC,AACvB,MAAM,CAAE,GAAG,CAAC,GAAG,AACjB,CAAC,AAED,2BAAY,CAAC,uBAAuB,eAAC,CAAC,AACpC,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,IAAI,CAAE,CAAC,AACT,CAAC"
}